
%%% Constants

lambda1 = 0.192;
lambda2 = 0.192;
mu = 0.0;
b1 = 5.85;
b2 = 5.85;
d = 0.00873;
beta1 = 0.15;
beta2 = 0.1;
beta = 0.05;
gmax = 3;
alpha12 = 0.1; %???TODO
alpha21 = 0.15; %???TODO
t0 = 0;
T = 200;
x0 = [20, 280, 650];
function y = F(x)
  y = -ln(x);
endfunction

epsilon = 0.01;
omega = 1000; %???TODO
function y = G(x)
  y = (1 + tanh(x))/2;
endfunction

%%% Auxiliary definitions

function x = ode(f, t0, T, x0)
  %Constant length of step for now
  STEP = 0.1; 
  N = ceil((T - t0)/STEP);
  x = rk4(f, t0, x0, T, N);
endfunction

%%% Differential equation

function [v1,v2,k] = f(t, [V1, V2, K], g)
  v1 = lambda1 * V1 .* F((V1 + alpha12 .* V2) ./ K) - beta1 * V1 .* g(t);
  v2 = lambda2 * V2 .* F((V2 + alpha21 .* V1) ./ K) - beta2 * V2 .* g(t);
  k = -mu * K + (V1 + V2) - d * ((V1 + V2).^(2/3)) .* K - beta * K .* g(t);
endfunction

%%% Goal function

%% collocation points
step = 0.2;
tt = t0 : step : T;
N = (T - t0) / step;

function y = J(g)
  X = [t0];
  for i = 1 : N - 1
    X = [X, ode(@(t, V) f(t, V, @(x) g(i)), tt(i), tt(i + 1), X(end))]
  end

  function x = gg(t)
    x = g(lookup(tt, t));
  endfunction

  function x = approxf(t)
    pos = lookup(tt, t);
    x = ode(@(t, V) f(t, V, @(x) g(pos)), tt(pos), tt(pos + 1), X(pos))(end);
  endfunction

  function x = integral(t)
    v = approxf(t)
    x = v(1) + v(2) + omega * G((V(2) - V(1)) / epsilon)
  endfunction
  
  y = quadgk(integral, 0, T)
endfunction

nonlin_min(J, zeros(N - 1), optimset("lbound", zeros(N - 1), "ubound", gmax * ones(N - 1)))

